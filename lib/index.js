'use strict';
const BbPromise = require('bluebird');
const path = require('path');
const _ = require('lodash');

class AwsStepFunctionsDeploy {
  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;
    this.provider = this.serverless.getProvider('aws');
    this.awsStateLanguage = {};

    this.hooks = {
      'before:deploy:deploy': this.action.bind(this),
    };
  }

  action() {
    this.serverless.cli.consoleLog('Start Deploy Step Functions');
    BbPromise.bind(this)
    .then(this.yamlParse)
    .then(this.compile)
    .then(this.deploy);
  }

  yamlParse() {
    const servicePath = this.serverless.config.servicePath;

    if (!servicePath) {
      return BbPromise.resolve();
    }

    let serverlessYmlPath = path.join(servicePath, 'serverless.yml');
    if (!this.serverless.utils.fileExistsSync(serverlessYmlPath)) {
      serverlessYmlPath = path
        .join(this.serverless.config.servicePath, 'serverless.yaml');
    }

    return this.serverless.yamlParser
      .parse(serverlessYmlPath)
      .then((serverlessFileParam) => {
        this.stepFunctions = serverlessFileParam.stepFunctions;
        return BbPromise.resolve();
      });
  }

  compile() {
    if (!this.stepFunctions) {
      return BbPromise.resolve();
    }
    

    _.forEach(this.stepFunctions, function (stateMachine, stateMachineName) {
      if (!stateMachine.start) {
        const errorMessage = [
          ' Please set `start` in stepFunctions statements in serverless.yml .',
        ].join('');
        throw new this.serverless.classes
        .Error(errorMessage);
      }
      
      //@todo error handling to not stateMachine.states

      const StartAt = stateMachine.start;
      const Comment = stateMachine.comment;
      this.awsStateLanguage[stateMachineName] = {
        Comment: Comment || 'Step Functions Generated by Serverless Step Functions.',
        StartAt,
        States: {},
      };

      _.forEach(stateMachine.states, function (state) {
        //@todo error handling to not type and resource
        const Type = state.type;
        const Resource = state.resource;
        this.awsStateLanguage[stateMachineName].States = {
          Type,
          Resource,
          End: 'true'
        }
      });
    });

    return BbPromise.resolve();
  }

  deploy() {
    return this.provider.request('StepFunctions',
      'createStateMachine',
      {
        definition: 'STRING_VALUE',
        name: 'STRING_VALUE',
        roleArn: 'STRING_VALUE'
      },
      this.options.stage,
      this.options.region);

  }

}
module.exports = AwsStepFunctionsDeploy;
